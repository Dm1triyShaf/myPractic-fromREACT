{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* хуки всегда начинаются с use */\nimport { useMemo } from \"react\";\nexport const useSortedPosts = (postы, sort) => {\n  _s();\n\n  /* 1 создаем хук функцию которая принимает посты и метод сортировки */\n  const sortedPosts = useMemo(() => {\n    /* 2 переносим sortedPosts с App.js */\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    return posts;\n  }, [sort, posts]);\n  return sortedPosts;\n  /* 3 возвращаем отсортированный массив */\n};\n\n_s(useSortedPosts, \"JCOM6shKwCo6CttVuNVxaNMnTKM=\");\n\nexport const usePost = (posts, sort, query) => {\n  _s2();\n\n  /* 4 создаем хук который будет возвращать отфильтрованный и отсортированный массив. Аргументами он принимает посты, метод сортировки и поисковую строку */\n  const sortedPosts = useSortedPosts(post, sort);\n  /* 6 передаем созданный хук в котором передаем посты и метод сортировки */\n\n  const sortedAndSearcedPosts = useMemo(() => {\n    /* 5 переносим логику по фильтрации из App.js */\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(query));\n  }, [query, sortedPosts]);\n  return sortedAndSearcedPosts;\n  /* 7 возвращаем отсортированный и отфильтрованный массив */\n};\n\n_s2(usePost, \"JteglUfp/NOVA7JjcNQPB1DpskA=\", false, function () {\n  return [useSortedPosts];\n});","map":{"version":3,"names":["useMemo","useSortedPosts","postы","sort","sortedPosts","posts","a","b","localeCompare","usePost","query","post","sortedAndSearcedPosts","filter","title","toLowerCase","includes"],"sources":["D:/Project/React/react-project/my-project/src/hooks/usePost.js"],"sourcesContent":["/* хуки всегда начинаются с use */\r\n\r\nimport { useMemo } from \"react\";\r\n\r\n\r\n\r\n\r\nexport const useSortedPosts = (postы, sort) => {    /* 1 создаем хук функцию которая принимает посты и метод сортировки */\r\n\r\n    const sortedPosts = useMemo(() => {      /* 2 переносим sortedPosts с App.js */\r\n        if (sort) {\r\n            return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]))\r\n        }\r\n        return posts;\r\n    }, [sort, posts])\r\n\r\n    return sortedPosts;   /* 3 возвращаем отсортированный массив */\r\n}\r\n\r\nexport const usePost = (posts, sort, query) => {   /* 4 создаем хук который будет возвращать отфильтрованный и отсортированный массив. Аргументами он принимает посты, метод сортировки и поисковую строку */\r\n    \r\n    const sortedPosts = useSortedPosts(post, sort)  /* 6 передаем созданный хук в котором передаем посты и метод сортировки */\r\n    \r\n    const sortedAndSearcedPosts = useMemo(() => {   /* 5 переносим логику по фильтрации из App.js */\r\n        return sortedPosts.filter(post => post.title.toLowerCase().includes(query))\r\n    }, [query, sortedPosts])\r\n\r\n    return sortedAndSearcedPosts; /* 7 возвращаем отсортированный и отфильтрованный массив */\r\n}"],"mappings":";;;AAAA;AAEA,SAASA,OAAT,QAAwB,OAAxB;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;EAAA;;EAAK;EAEhD,MAAMC,WAAW,GAAGJ,OAAO,CAAC,MAAM;IAAO;IACrC,IAAIG,IAAJ,EAAU;MACN,OAAO,CAAC,GAAGE,KAAJ,EAAWF,IAAX,CAAgB,CAACG,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,IAAD,CAAD,CAAQK,aAAR,CAAsBD,CAAC,CAACJ,IAAD,CAAvB,CAA1B,CAAP;IACH;;IACD,OAAOE,KAAP;EACH,CAL0B,EAKxB,CAACF,IAAD,EAAOE,KAAP,CALwB,CAA3B;EAOA,OAAOD,WAAP;EAAsB;AACzB,CAVM;;GAAMH,c;;AAYb,OAAO,MAAMQ,OAAO,GAAG,CAACJ,KAAD,EAAQF,IAAR,EAAcO,KAAd,KAAwB;EAAA;;EAAI;EAE/C,MAAMN,WAAW,GAAGH,cAAc,CAACU,IAAD,EAAOR,IAAP,CAAlC;EAAgD;;EAEhD,MAAMS,qBAAqB,GAAGZ,OAAO,CAAC,MAAM;IAAI;IAC5C,OAAOI,WAAW,CAACS,MAAZ,CAAmBF,IAAI,IAAIA,IAAI,CAACG,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAlC,CAA3B,CAAP;EACH,CAFoC,EAElC,CAACA,KAAD,EAAQN,WAAR,CAFkC,CAArC;EAIA,OAAOQ,qBAAP;EAA8B;AACjC,CATM;;IAAMH,O;UAEWR,c"},"metadata":{},"sourceType":"module"}