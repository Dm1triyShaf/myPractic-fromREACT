{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\React\\\\react-project\\\\my-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\n/* 8 импортируем хук useMemo */\n\nimport PostForm from './components/postForm';\nimport PostList from './components/postList';\nimport './styles/App.css';\nimport MySelect from '../src/components/UI/select/MySelect';\nimport MyInput from './components/UI/input/MyInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [posts, setPosts] = useState([{\n    id: 1,\n    title: 'ffdf',\n    body: 'fdw'\n  }, {\n    id: 2,\n    title: 'awewe 2',\n    body: 'Description'\n  }, {\n    id: 3,\n    title: 'cxvb 3',\n    body: 'yjy'\n  }]);\n  const [selectedSort, setSelectedSort] = useState('');\n  const [searсhQuery, setSearchQuery] = useState('');\n  /* 3 делаем этот инпут управляемым, создаем состояние searсhQuery и функцию которая его будет изменять setSearchQuery, инициализируем useState */\n\n  const sortedPosts = useMemo(() => {\n    /* 9 создаем хук useMemo, первым параметром передаем колбе */\n    console.log('ОТРАБОТАЛА ФУНКЦИЯ sortedPosts');\n\n    if (selectedSort) {\n      return [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]));\n      /* 6 добавляем механизм сортировки */\n    }\n\n    return posts;\n  }, [selectedSort, posts]);\n  const sortedAndSearcedPosts = useMemo(() => {\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(searсhQuery));\n  }, [searсhQuery, sortedPosts]);\n\n  const createPost = newPost => {\n    setPosts([...posts, newPost]);\n  };\n\n  const removePost = post => {\n    setPosts(posts.filter(p => p.id !== post.id));\n  };\n\n  const sortPosts = sort => {\n    setSelectedSort(sort);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      create: createPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: '15px 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MyInput\n      /*  1 создаем новый инпут */\n      , {\n        value: searсhQuery\n        /* 4 переадем searсhQuery */\n        ,\n        onChange: e => setSearchQuery(e.target.value)\n        /* 5 вешаем слушатель события onChange, и получаем значение из таргета в поле валью */\n        ,\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A...\"\n        /*  2 добавляем плайсхолдер */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n        value: selectedSort,\n        onChange: sortPosts,\n        defaultValue: \"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\",\n        options: [{\n          value: 'title',\n          name: 'По названию'\n        }, {\n          value: 'body',\n          name: 'По описанию'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), sortedAndSearcedPosts.length !== 0 ? /*#__PURE__*/_jsxDEV(PostList, {\n      remove: removePost,\n      posts: sortedAndSearcedPosts,\n      title: \"\\u043F\\u043E\\u0441\\u0442\\u044B \\u043F\\u0440\\u043E Javascript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)\n    /* 7 передаем отсортированный массив постов */\n    : /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"\\u041F\\u043E\\u0441\\u0442\\u044B \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/n0oPi6fzWj/NH6FxUQBI8/8eEo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useMemo","useState","PostForm","PostList","MySelect","MyInput","App","posts","setPosts","id","title","body","selectedSort","setSelectedSort","searсhQuery","setSearchQuery","sortedPosts","console","log","sort","a","b","localeCompare","sortedAndSearcedPosts","filter","post","toLowerCase","includes","createPost","newPost","removePost","p","sortPosts","margin","e","target","value","name","length","textAlign"],"sources":["D:/Project/React/react-project/my-project/src/App.js"],"sourcesContent":["import React, {  useMemo, useState } from 'react';  /* 8 импортируем хук useMemo */\nimport PostForm from './components/postForm';\nimport PostList from './components/postList';\nimport './styles/App.css';\nimport MySelect from '../src/components/UI/select/MySelect'   \nimport MyInput from './components/UI/input/MyInput';\n\nfunction App() {\n  const [posts, setPosts] = useState([\n    { id: 1, title: 'ffdf', body: 'fdw' },\n    { id: 2, title: 'awewe 2', body: 'Description' },\n    { id: 3, title: 'cxvb 3', body: 'yjy' },\n\n  ])\n\n\n  const [selectedSort,setSelectedSort] = useState('')   \n  const [searсhQuery,setSearchQuery] = useState('')       /* 3 делаем этот инпут управляемым, создаем состояние searсhQuery и функцию которая его будет изменять setSearchQuery, инициализируем useState */\n\n\n  const sortedPosts = useMemo( () => {   /* 9 создаем хук useMemo, первым параметром передаем колбе */\n    console.log('ОТРАБОТАЛА ФУНКЦИЯ sortedPosts')\n    if(selectedSort) {\n      return [...posts].sort((a,b)=>a[selectedSort].localeCompare(b[selectedSort]))  /* 6 добавляем механизм сортировки */\n    }\n      return posts;\n    }, [selectedSort, posts])\n\n  const sortedAndSearcedPosts = useMemo(() =>{\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(searсhQuery))\n  },[searсhQuery,sortedPosts])\n\n  const createPost = (newPost) => {\n    setPosts([...posts, newPost])\n  }\n\n\n\n  const removePost = (post) => {\n    setPosts(posts.filter(p => p.id !== post.id))\n\n  }\n\n  const sortPosts = (sort) => {    \n    setSelectedSort(sort);   \n  }\n\n\n  return (\n    <div className=\"App\">\n      <PostForm create={createPost} />\n      <hr style={{ margin: '15px 0' }}/> \n      <div>\n        <MyInput   /*  1 создаем новый инпут */\n          value={searсhQuery}     /* 4 переадем searсhQuery */\n          onChange={e=>setSearchQuery(e.target.value)}   /* 5 вешаем слушатель события onChange, и получаем значение из таргета в поле валью */\n          placeholder=\"Поиск...\"   /*  2 добавляем плайсхолдер */\n        />\n\n        <MySelect    \n          value={selectedSort}   \n          onChange={sortPosts}  \n          defaultValue=\"Сортировка\"   \n          options={[      \n            {value: 'title', name:'По названию'},    \n            {value: 'body', name:'По описанию'},       \n          ]} \n          />\n\n      </div>\n      {sortedAndSearcedPosts.length !== 0\n        ? <PostList remove={removePost} posts={sortedAndSearcedPosts} title=\"посты про Javascript\" />    /* 7 передаем отсортированный массив постов */\n        : <h1 style={{ textAlign: 'center' }}>\n          Посты не найдены\n        </h1>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}